<?php
/**
 * ReceivedInvoicesResultInvoicesInnerItemsInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\Helios\Invoices
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * iNuvio Server Invoices API
 *
 * ## Úvod    **REST API** je rozšířený standard programového rozhranní pro integraci aplikací.
 *
 * The version of the OpenAPI document: 1.2.33
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\Helios\Invoices\Model;

use \ArrayAccess;
use \BeLenka\Helios\Invoices\ObjectSerializer;

/**
 * ReceivedInvoicesResultInvoicesInnerItemsInner Class Doc Comment
 *
 * @category Class
 * @package  BeLenka\Helios\Invoices
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ReceivedInvoicesResultInvoicesInnerItemsInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'receivedInvoicesResult_invoices_inner_items_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'item_id' => 'string',
        'item_type' => 'string',
        'warehouse_id' => 'string',
        'warehouse_item_id' => 'int',
        'catalogue_no' => 'string',
        'description' => 'string',
        'quantity' => 'float',
        'measure_unit' => 'string',
        'unit_currency_amount' => 'float',
        'currency_amount' => 'float',
        'vat_rate' => 'float',
        'currency_amount_tax_inclusive' => 'float',
        'reverse_charge_percent' => 'float',
        'reverse_charge_code' => 'string',
        'note' => 'string',
        'created_on' => '\DateTime',
        'modified_on' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'item_id' => null,
        'item_type' => null,
        'warehouse_id' => null,
        'warehouse_item_id' => null,
        'catalogue_no' => null,
        'description' => null,
        'quantity' => 'double',
        'measure_unit' => null,
        'unit_currency_amount' => 'double',
        'currency_amount' => 'double',
        'vat_rate' => 'double',
        'currency_amount_tax_inclusive' => 'double',
        'reverse_charge_percent' => 'double',
        'reverse_charge_code' => null,
        'note' => null,
        'created_on' => 'date-time',
        'modified_on' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'item_id' => false,
		'item_type' => false,
		'warehouse_id' => true,
		'warehouse_item_id' => true,
		'catalogue_no' => true,
		'description' => false,
		'quantity' => false,
		'measure_unit' => true,
		'unit_currency_amount' => false,
		'currency_amount' => false,
		'vat_rate' => true,
		'currency_amount_tax_inclusive' => false,
		'reverse_charge_percent' => true,
		'reverse_charge_code' => false,
		'note' => false,
		'created_on' => false,
		'modified_on' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'item_id' => 'itemId',
        'item_type' => 'itemType',
        'warehouse_id' => 'warehouseId',
        'warehouse_item_id' => 'warehouseItemId',
        'catalogue_no' => 'catalogueNo',
        'description' => 'description',
        'quantity' => 'quantity',
        'measure_unit' => 'measureUnit',
        'unit_currency_amount' => 'unitCurrencyAmount',
        'currency_amount' => 'currencyAmount',
        'vat_rate' => 'vatRate',
        'currency_amount_tax_inclusive' => 'currencyAmountTaxInclusive',
        'reverse_charge_percent' => 'reverseChargePercent',
        'reverse_charge_code' => 'reverseChargeCode',
        'note' => 'note',
        'created_on' => 'createdOn',
        'modified_on' => 'modifiedOn'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'item_id' => 'setItemId',
        'item_type' => 'setItemType',
        'warehouse_id' => 'setWarehouseId',
        'warehouse_item_id' => 'setWarehouseItemId',
        'catalogue_no' => 'setCatalogueNo',
        'description' => 'setDescription',
        'quantity' => 'setQuantity',
        'measure_unit' => 'setMeasureUnit',
        'unit_currency_amount' => 'setUnitCurrencyAmount',
        'currency_amount' => 'setCurrencyAmount',
        'vat_rate' => 'setVatRate',
        'currency_amount_tax_inclusive' => 'setCurrencyAmountTaxInclusive',
        'reverse_charge_percent' => 'setReverseChargePercent',
        'reverse_charge_code' => 'setReverseChargeCode',
        'note' => 'setNote',
        'created_on' => 'setCreatedOn',
        'modified_on' => 'setModifiedOn'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'item_id' => 'getItemId',
        'item_type' => 'getItemType',
        'warehouse_id' => 'getWarehouseId',
        'warehouse_item_id' => 'getWarehouseItemId',
        'catalogue_no' => 'getCatalogueNo',
        'description' => 'getDescription',
        'quantity' => 'getQuantity',
        'measure_unit' => 'getMeasureUnit',
        'unit_currency_amount' => 'getUnitCurrencyAmount',
        'currency_amount' => 'getCurrencyAmount',
        'vat_rate' => 'getVatRate',
        'currency_amount_tax_inclusive' => 'getCurrencyAmountTaxInclusive',
        'reverse_charge_percent' => 'getReverseChargePercent',
        'reverse_charge_code' => 'getReverseChargeCode',
        'note' => 'getNote',
        'created_on' => 'getCreatedOn',
        'modified_on' => 'getModifiedOn'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const ITEM_TYPE_TXT_ITEM = 'txtItem';
    public const ITEM_TYPE_ITEM = 'item';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getItemTypeAllowableValues()
    {
        return [
            self::ITEM_TYPE_TXT_ITEM,
            self::ITEM_TYPE_ITEM,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('item_id', $data ?? [], null);
        $this->setIfExists('item_type', $data ?? [], null);
        $this->setIfExists('warehouse_id', $data ?? [], null);
        $this->setIfExists('warehouse_item_id', $data ?? [], null);
        $this->setIfExists('catalogue_no', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('quantity', $data ?? [], null);
        $this->setIfExists('measure_unit', $data ?? [], null);
        $this->setIfExists('unit_currency_amount', $data ?? [], null);
        $this->setIfExists('currency_amount', $data ?? [], null);
        $this->setIfExists('vat_rate', $data ?? [], null);
        $this->setIfExists('currency_amount_tax_inclusive', $data ?? [], null);
        $this->setIfExists('reverse_charge_percent', $data ?? [], null);
        $this->setIfExists('reverse_charge_code', $data ?? [], null);
        $this->setIfExists('note', $data ?? [], null);
        $this->setIfExists('created_on', $data ?? [], null);
        $this->setIfExists('modified_on', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getItemTypeAllowableValues();
        if (!is_null($this->container['item_type']) && !in_array($this->container['item_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'item_type', must be one of '%s'",
                $this->container['item_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets item_id
     *
     * @return string|null
     */
    public function getItemId()
    {
        return $this->container['item_id'];
    }

    /**
     * Sets item_id
     *
     * @param string|null $item_id Jednoznačná identifikace položky ['P' + TabPohybyZbozi.ID/ 'T' + TabOzTxtPol.ID]
     *
     * @return self
     */
    public function setItemId($item_id)
    {
        if (is_null($item_id)) {
            throw new \InvalidArgumentException('non-nullable item_id cannot be null');
        }
        $this->container['item_id'] = $item_id;

        return $this;
    }

    /**
     * Gets item_type
     *
     * @return string|null
     */
    public function getItemType()
    {
        return $this->container['item_type'];
    }

    /**
     * Sets item_type
     *
     * @param string|null $item_type item_type
     *
     * @return self
     */
    public function setItemType($item_type)
    {
        if (is_null($item_type)) {
            throw new \InvalidArgumentException('non-nullable item_type cannot be null');
        }
        $allowedValues = $this->getItemTypeAllowableValues();
        if (!in_array($item_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'item_type', must be one of '%s'",
                    $item_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['item_type'] = $item_type;

        return $this;
    }

    /**
     * Gets warehouse_id
     *
     * @return string|null
     */
    public function getWarehouseId()
    {
        return $this->container['warehouse_id'];
    }

    /**
     * Sets warehouse_id
     *
     * @param string|null $warehouse_id Číslo skladu [TabStrom.Cislo/null]
     *
     * @return self
     */
    public function setWarehouseId($warehouse_id)
    {
        if (is_null($warehouse_id)) {
            array_push($this->openAPINullablesSetToNull, 'warehouse_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('warehouse_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['warehouse_id'] = $warehouse_id;

        return $this;
    }

    /**
     * Gets warehouse_item_id
     *
     * @return int|null
     */
    public function getWarehouseItemId()
    {
        return $this->container['warehouse_item_id'];
    }

    /**
     * Sets warehouse_item_id
     *
     * @param int|null $warehouse_item_id ID skladové karty [TabPohybyZbozi.IDZboSklad/null]
     *
     * @return self
     */
    public function setWarehouseItemId($warehouse_item_id)
    {
        if (is_null($warehouse_item_id)) {
            array_push($this->openAPINullablesSetToNull, 'warehouse_item_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('warehouse_item_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['warehouse_item_id'] = $warehouse_item_id;

        return $this;
    }

    /**
     * Gets catalogue_no
     *
     * @return string|null
     */
    public function getCatalogueNo()
    {
        return $this->container['catalogue_no'];
    }

    /**
     * Sets catalogue_no
     *
     * @param string|null $catalogue_no Skupina + Registrační číslo [TabPohybyZbozi.CisloKarty/null]
     *
     * @return self
     */
    public function setCatalogueNo($catalogue_no)
    {
        if (is_null($catalogue_no)) {
            array_push($this->openAPINullablesSetToNull, 'catalogue_no');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('catalogue_no', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['catalogue_no'] = $catalogue_no;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Popis položky [TabPohybyZbozi.Nazev1/TabOZTxtPol.Popis]
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return float|null
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param float|null $quantity Množství [TabPohybyZbozi.Mnozstvi/TabOZTxtPol.Mnozstvi]
     *
     * @return self
     */
    public function setQuantity($quantity)
    {
        if (is_null($quantity)) {
            throw new \InvalidArgumentException('non-nullable quantity cannot be null');
        }
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets measure_unit
     *
     * @return string|null
     */
    public function getMeasureUnit()
    {
        return $this->container['measure_unit'];
    }

    /**
     * Sets measure_unit
     *
     * @param string|null $measure_unit Měrná jednotka [TabPohybyZbozi.MJ/TabOZTxtPol.MJ]
     *
     * @return self
     */
    public function setMeasureUnit($measure_unit)
    {
        if (is_null($measure_unit)) {
            array_push($this->openAPINullablesSetToNull, 'measure_unit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('measure_unit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['measure_unit'] = $measure_unit;

        return $this;
    }

    /**
     * Gets unit_currency_amount
     *
     * @return float|null
     */
    public function getUnitCurrencyAmount()
    {
        return $this->container['unit_currency_amount'];
    }

    /**
     * Sets unit_currency_amount
     *
     * @param float|null $unit_currency_amount Jednotková cena bez DPH v měně dokladu [TabPohybyZbozi.JCbezDaniValPoS/TabOZTxtPol.JCbezDaniValPoS]
     *
     * @return self
     */
    public function setUnitCurrencyAmount($unit_currency_amount)
    {
        if (is_null($unit_currency_amount)) {
            throw new \InvalidArgumentException('non-nullable unit_currency_amount cannot be null');
        }
        $this->container['unit_currency_amount'] = $unit_currency_amount;

        return $this;
    }

    /**
     * Gets currency_amount
     *
     * @return float|null
     */
    public function getCurrencyAmount()
    {
        return $this->container['currency_amount'];
    }

    /**
     * Sets currency_amount
     *
     * @param float|null $currency_amount Celková cena bez DPH v měně dokladu [TabPohybyZbozi.CCbezDaniValPoS/TabOZTxtPol.CCbezDaniValPoS]
     *
     * @return self
     */
    public function setCurrencyAmount($currency_amount)
    {
        if (is_null($currency_amount)) {
            throw new \InvalidArgumentException('non-nullable currency_amount cannot be null');
        }
        $this->container['currency_amount'] = $currency_amount;

        return $this;
    }

    /**
     * Gets vat_rate
     *
     * @return float|null
     */
    public function getVatRate()
    {
        return $this->container['vat_rate'];
    }

    /**
     * Sets vat_rate
     *
     * @param float|null $vat_rate Sazba DPH [TabPohybyZbozi.SazbaDPH/TabOZTxtPol.SazbaDPH]
     *
     * @return self
     */
    public function setVatRate($vat_rate)
    {
        if (is_null($vat_rate)) {
            array_push($this->openAPINullablesSetToNull, 'vat_rate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('vat_rate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['vat_rate'] = $vat_rate;

        return $this;
    }

    /**
     * Gets currency_amount_tax_inclusive
     *
     * @return float|null
     */
    public function getCurrencyAmountTaxInclusive()
    {
        return $this->container['currency_amount_tax_inclusive'];
    }

    /**
     * Sets currency_amount_tax_inclusive
     *
     * @param float|null $currency_amount_tax_inclusive Celková cena včetně DPH v měně dokladu [TabPohybyZbozi.CCSDPHValPoS/TabOZTxtPol.CCSDPHValPoS]
     *
     * @return self
     */
    public function setCurrencyAmountTaxInclusive($currency_amount_tax_inclusive)
    {
        if (is_null($currency_amount_tax_inclusive)) {
            throw new \InvalidArgumentException('non-nullable currency_amount_tax_inclusive cannot be null');
        }
        $this->container['currency_amount_tax_inclusive'] = $currency_amount_tax_inclusive;

        return $this;
    }

    /**
     * Gets reverse_charge_percent
     *
     * @return float|null
     */
    public function getReverseChargePercent()
    {
        return $this->container['reverse_charge_percent'];
    }

    /**
     * Sets reverse_charge_percent
     *
     * @param float|null $reverse_charge_percent Sazba DPH samovyměření [TabPohybyZbozi.SazbaDPHproPDP/TabOZTxtPol.SazbaDPHproPDP]
     *
     * @return self
     */
    public function setReverseChargePercent($reverse_charge_percent)
    {
        if (is_null($reverse_charge_percent)) {
            array_push($this->openAPINullablesSetToNull, 'reverse_charge_percent');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('reverse_charge_percent', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['reverse_charge_percent'] = $reverse_charge_percent;

        return $this;
    }

    /**
     * Gets reverse_charge_code
     *
     * @return string|null
     */
    public function getReverseChargeCode()
    {
        return $this->container['reverse_charge_code'];
    }

    /**
     * Sets reverse_charge_code
     *
     * @param string|null $reverse_charge_code Kód PDP [TabCisKoduPDP.KodZbozi (vazba TabPohybyZbozi.IDKodPDP/TabOZTxtPol.IDKodPDP)]
     *
     * @return self
     */
    public function setReverseChargeCode($reverse_charge_code)
    {
        if (is_null($reverse_charge_code)) {
            throw new \InvalidArgumentException('non-nullable reverse_charge_code cannot be null');
        }
        $this->container['reverse_charge_code'] = $reverse_charge_code;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string|null
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string|null $note Poznámka k položce [TabPohybyZbozi.Poznamka/TabOZTxtPol.Poznamka]
     *
     * @return self
     */
    public function setNote($note)
    {
        if (is_null($note)) {
            throw new \InvalidArgumentException('non-nullable note cannot be null');
        }
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets created_on
     *
     * @return \DateTime|null
     */
    public function getCreatedOn()
    {
        return $this->container['created_on'];
    }

    /**
     * Sets created_on
     *
     * @param \DateTime|null $created_on Datum a čas vytvoření položky [TabPohybyZbozi.DatPorizeni/TabOZTxtPol.DatPorizeni]
     *
     * @return self
     */
    public function setCreatedOn($created_on)
    {
        if (is_null($created_on)) {
            throw new \InvalidArgumentException('non-nullable created_on cannot be null');
        }
        $this->container['created_on'] = $created_on;

        return $this;
    }

    /**
     * Gets modified_on
     *
     * @return \DateTime|null
     */
    public function getModifiedOn()
    {
        return $this->container['modified_on'];
    }

    /**
     * Sets modified_on
     *
     * @param \DateTime|null $modified_on Datum a čas změny položky [TabPohybyZbozi.DatZmeny/TabOZTxtPol.DatZmeny]
     *
     * @return self
     */
    public function setModifiedOn($modified_on)
    {
        if (is_null($modified_on)) {
            array_push($this->openAPINullablesSetToNull, 'modified_on');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('modified_on', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['modified_on'] = $modified_on;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


