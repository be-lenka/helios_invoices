<?php
/**
 * FakturyPijatApi
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\Helios\Invoices
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * iNuvio Server Invoices API
 *
 * ## Úvod    **REST API** je rozšířený standard programového rozhranní pro integraci aplikací.
 *
 * The version of the OpenAPI document: 1.2.33
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\Helios\Invoices\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use BeLenka\Helios\Invoices\ApiException;
use BeLenka\Helios\Invoices\Configuration;
use BeLenka\Helios\Invoices\HeaderSelector;
use BeLenka\Helios\Invoices\ObjectSerializer;

/**
 * FakturyPijatApi Class Doc Comment
 *
 * @category Class
 * @package  BeLenka\Helios\Invoices
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class FakturyPijatApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'invoicesReceivedDbNameGet' => [
            'application/json',
        ],
        'invoicesReceivedDbNameInvoiceIdDelete' => [
            'application/json',
        ],
        'invoicesReceivedDbNameInvoiceIdGet' => [
            'application/json',
        ],
        'invoicesReceivedDbNameInvoiceIdItemsGet' => [
            'application/json',
        ],
        'invoicesReceivedDbNamePost' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation invoicesReceivedDbNameGet
     *
     * Seznam faktur přijatých
     *
     * @param  string $db_name Název databáze. (required)
     * @param  int $period Systémový parametr - Účetní období. (optional)
     * @param  string $filter Podmínka pro výběr dat. (optional)
     * @param  string $orderby Seznam sloupců, podle kterých chci třídit. (optional)
     * @param  int $top Stránkování - počet vrácených záznamů (pokud je jich tolik k dispozici, jinak méně). (optional)
     * @param  int $skip Stránkování - počet přeskočených záznamů. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoicesReceivedDbNameGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\Helios\Invoices\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\Helios\Invoices\Model\ReceivedInvoicesResult|\BeLenka\Helios\Invoices\Model\ErrorResult|\BeLenka\Helios\Invoices\Model\ErrorResult|\BeLenka\Helios\Invoices\Model\ErrorResult|\BeLenka\Helios\Invoices\Model\ErrorResult|\BeLenka\Helios\Invoices\Model\ErrorResult
     */
    public function invoicesReceivedDbNameGet($db_name, $period = null, $filter = null, $orderby = null, $top = null, $skip = null, string $contentType = self::contentTypes['invoicesReceivedDbNameGet'][0])
    {
        list($response) = $this->invoicesReceivedDbNameGetWithHttpInfo($db_name, $period, $filter, $orderby, $top, $skip, $contentType);
        return $response;
    }

    /**
     * Operation invoicesReceivedDbNameGetWithHttpInfo
     *
     * Seznam faktur přijatých
     *
     * @param  string $db_name Název databáze. (required)
     * @param  int $period Systémový parametr - Účetní období. (optional)
     * @param  string $filter Podmínka pro výběr dat. (optional)
     * @param  string $orderby Seznam sloupců, podle kterých chci třídit. (optional)
     * @param  int $top Stránkování - počet vrácených záznamů (pokud je jich tolik k dispozici, jinak méně). (optional)
     * @param  int $skip Stránkování - počet přeskočených záznamů. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoicesReceivedDbNameGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\Helios\Invoices\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\Helios\Invoices\Model\ReceivedInvoicesResult|\BeLenka\Helios\Invoices\Model\ErrorResult|\BeLenka\Helios\Invoices\Model\ErrorResult|\BeLenka\Helios\Invoices\Model\ErrorResult|\BeLenka\Helios\Invoices\Model\ErrorResult|\BeLenka\Helios\Invoices\Model\ErrorResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function invoicesReceivedDbNameGetWithHttpInfo($db_name, $period = null, $filter = null, $orderby = null, $top = null, $skip = null, string $contentType = self::contentTypes['invoicesReceivedDbNameGet'][0])
    {
        $request = $this->invoicesReceivedDbNameGetRequest($db_name, $period, $filter, $orderby, $top, $skip, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\Helios\Invoices\Model\ReceivedInvoicesResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\Helios\Invoices\Model\ReceivedInvoicesResult' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\Helios\Invoices\Model\ReceivedInvoicesResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\BeLenka\Helios\Invoices\Model\ErrorResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\Helios\Invoices\Model\ErrorResult' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\Helios\Invoices\Model\ErrorResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\BeLenka\Helios\Invoices\Model\ErrorResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\Helios\Invoices\Model\ErrorResult' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\Helios\Invoices\Model\ErrorResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\BeLenka\Helios\Invoices\Model\ErrorResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\Helios\Invoices\Model\ErrorResult' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\Helios\Invoices\Model\ErrorResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\BeLenka\Helios\Invoices\Model\ErrorResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\Helios\Invoices\Model\ErrorResult' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\Helios\Invoices\Model\ErrorResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\BeLenka\Helios\Invoices\Model\ErrorResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\Helios\Invoices\Model\ErrorResult' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\Helios\Invoices\Model\ErrorResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\BeLenka\Helios\Invoices\Model\ReceivedInvoicesResult';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\Helios\Invoices\Model\ReceivedInvoicesResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\Helios\Invoices\Model\ErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\Helios\Invoices\Model\ErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\Helios\Invoices\Model\ErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\Helios\Invoices\Model\ErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\Helios\Invoices\Model\ErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation invoicesReceivedDbNameGetAsync
     *
     * Seznam faktur přijatých
     *
     * @param  string $db_name Název databáze. (required)
     * @param  int $period Systémový parametr - Účetní období. (optional)
     * @param  string $filter Podmínka pro výběr dat. (optional)
     * @param  string $orderby Seznam sloupců, podle kterých chci třídit. (optional)
     * @param  int $top Stránkování - počet vrácených záznamů (pokud je jich tolik k dispozici, jinak méně). (optional)
     * @param  int $skip Stránkování - počet přeskočených záznamů. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoicesReceivedDbNameGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function invoicesReceivedDbNameGetAsync($db_name, $period = null, $filter = null, $orderby = null, $top = null, $skip = null, string $contentType = self::contentTypes['invoicesReceivedDbNameGet'][0])
    {
        return $this->invoicesReceivedDbNameGetAsyncWithHttpInfo($db_name, $period, $filter, $orderby, $top, $skip, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation invoicesReceivedDbNameGetAsyncWithHttpInfo
     *
     * Seznam faktur přijatých
     *
     * @param  string $db_name Název databáze. (required)
     * @param  int $period Systémový parametr - Účetní období. (optional)
     * @param  string $filter Podmínka pro výběr dat. (optional)
     * @param  string $orderby Seznam sloupců, podle kterých chci třídit. (optional)
     * @param  int $top Stránkování - počet vrácených záznamů (pokud je jich tolik k dispozici, jinak méně). (optional)
     * @param  int $skip Stránkování - počet přeskočených záznamů. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoicesReceivedDbNameGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function invoicesReceivedDbNameGetAsyncWithHttpInfo($db_name, $period = null, $filter = null, $orderby = null, $top = null, $skip = null, string $contentType = self::contentTypes['invoicesReceivedDbNameGet'][0])
    {
        $returnType = '\BeLenka\Helios\Invoices\Model\ReceivedInvoicesResult';
        $request = $this->invoicesReceivedDbNameGetRequest($db_name, $period, $filter, $orderby, $top, $skip, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'invoicesReceivedDbNameGet'
     *
     * @param  string $db_name Název databáze. (required)
     * @param  int $period Systémový parametr - Účetní období. (optional)
     * @param  string $filter Podmínka pro výběr dat. (optional)
     * @param  string $orderby Seznam sloupců, podle kterých chci třídit. (optional)
     * @param  int $top Stránkování - počet vrácených záznamů (pokud je jich tolik k dispozici, jinak méně). (optional)
     * @param  int $skip Stránkování - počet přeskočených záznamů. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoicesReceivedDbNameGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function invoicesReceivedDbNameGetRequest($db_name, $period = null, $filter = null, $orderby = null, $top = null, $skip = null, string $contentType = self::contentTypes['invoicesReceivedDbNameGet'][0])
    {

        // verify the required parameter 'db_name' is set
        if ($db_name === null || (is_array($db_name) && count($db_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $db_name when calling invoicesReceivedDbNameGet'
            );
        }







        $resourcePath = '/invoices/received/{dbName}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $period,
            'period', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            'filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderby,
            'orderby', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $top,
            'top', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            'skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($db_name !== null) {
            $resourcePath = str_replace(
                '{' . 'dbName' . '}',
                ObjectSerializer::toPathValue($db_name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation invoicesReceivedDbNameInvoiceIdDelete
     *
     * Smazání faktury přijaté
     *
     * @param  string $db_name Název databáze. (required)
     * @param  string $invoice_id ID faktury. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoicesReceivedDbNameInvoiceIdDelete'] to see the possible values for this operation
     *
     * @throws \BeLenka\Helios\Invoices\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\Helios\Invoices\Model\ErrorResult|\BeLenka\Helios\Invoices\Model\ErrorResult|\BeLenka\Helios\Invoices\Model\ErrorResult|string|\BeLenka\Helios\Invoices\Model\ErrorResult|\BeLenka\Helios\Invoices\Model\ErrorResult
     */
    public function invoicesReceivedDbNameInvoiceIdDelete($db_name, $invoice_id, string $contentType = self::contentTypes['invoicesReceivedDbNameInvoiceIdDelete'][0])
    {
        list($response) = $this->invoicesReceivedDbNameInvoiceIdDeleteWithHttpInfo($db_name, $invoice_id, $contentType);
        return $response;
    }

    /**
     * Operation invoicesReceivedDbNameInvoiceIdDeleteWithHttpInfo
     *
     * Smazání faktury přijaté
     *
     * @param  string $db_name Název databáze. (required)
     * @param  string $invoice_id ID faktury. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoicesReceivedDbNameInvoiceIdDelete'] to see the possible values for this operation
     *
     * @throws \BeLenka\Helios\Invoices\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\Helios\Invoices\Model\ErrorResult|\BeLenka\Helios\Invoices\Model\ErrorResult|\BeLenka\Helios\Invoices\Model\ErrorResult|string|\BeLenka\Helios\Invoices\Model\ErrorResult|\BeLenka\Helios\Invoices\Model\ErrorResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function invoicesReceivedDbNameInvoiceIdDeleteWithHttpInfo($db_name, $invoice_id, string $contentType = self::contentTypes['invoicesReceivedDbNameInvoiceIdDelete'][0])
    {
        $request = $this->invoicesReceivedDbNameInvoiceIdDeleteRequest($db_name, $invoice_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 401:
                    if ('\BeLenka\Helios\Invoices\Model\ErrorResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\Helios\Invoices\Model\ErrorResult' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\Helios\Invoices\Model\ErrorResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\BeLenka\Helios\Invoices\Model\ErrorResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\Helios\Invoices\Model\ErrorResult' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\Helios\Invoices\Model\ErrorResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\BeLenka\Helios\Invoices\Model\ErrorResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\Helios\Invoices\Model\ErrorResult' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\Helios\Invoices\Model\ErrorResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 204:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\BeLenka\Helios\Invoices\Model\ErrorResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\Helios\Invoices\Model\ErrorResult' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\Helios\Invoices\Model\ErrorResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\BeLenka\Helios\Invoices\Model\ErrorResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\Helios\Invoices\Model\ErrorResult' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\Helios\Invoices\Model\ErrorResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\Helios\Invoices\Model\ErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\Helios\Invoices\Model\ErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\Helios\Invoices\Model\ErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\Helios\Invoices\Model\ErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\Helios\Invoices\Model\ErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation invoicesReceivedDbNameInvoiceIdDeleteAsync
     *
     * Smazání faktury přijaté
     *
     * @param  string $db_name Název databáze. (required)
     * @param  string $invoice_id ID faktury. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoicesReceivedDbNameInvoiceIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function invoicesReceivedDbNameInvoiceIdDeleteAsync($db_name, $invoice_id, string $contentType = self::contentTypes['invoicesReceivedDbNameInvoiceIdDelete'][0])
    {
        return $this->invoicesReceivedDbNameInvoiceIdDeleteAsyncWithHttpInfo($db_name, $invoice_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation invoicesReceivedDbNameInvoiceIdDeleteAsyncWithHttpInfo
     *
     * Smazání faktury přijaté
     *
     * @param  string $db_name Název databáze. (required)
     * @param  string $invoice_id ID faktury. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoicesReceivedDbNameInvoiceIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function invoicesReceivedDbNameInvoiceIdDeleteAsyncWithHttpInfo($db_name, $invoice_id, string $contentType = self::contentTypes['invoicesReceivedDbNameInvoiceIdDelete'][0])
    {
        $returnType = 'string';
        $request = $this->invoicesReceivedDbNameInvoiceIdDeleteRequest($db_name, $invoice_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'invoicesReceivedDbNameInvoiceIdDelete'
     *
     * @param  string $db_name Název databáze. (required)
     * @param  string $invoice_id ID faktury. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoicesReceivedDbNameInvoiceIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function invoicesReceivedDbNameInvoiceIdDeleteRequest($db_name, $invoice_id, string $contentType = self::contentTypes['invoicesReceivedDbNameInvoiceIdDelete'][0])
    {

        // verify the required parameter 'db_name' is set
        if ($db_name === null || (is_array($db_name) && count($db_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $db_name when calling invoicesReceivedDbNameInvoiceIdDelete'
            );
        }

        // verify the required parameter 'invoice_id' is set
        if ($invoice_id === null || (is_array($invoice_id) && count($invoice_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_id when calling invoicesReceivedDbNameInvoiceIdDelete'
            );
        }


        $resourcePath = '/invoices/received/{dbName}/{invoiceId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($db_name !== null) {
            $resourcePath = str_replace(
                '{' . 'dbName' . '}',
                ObjectSerializer::toPathValue($db_name),
                $resourcePath
            );
        }
        // path params
        if ($invoice_id !== null) {
            $resourcePath = str_replace(
                '{' . 'invoiceId' . '}',
                ObjectSerializer::toPathValue($invoice_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation invoicesReceivedDbNameInvoiceIdGet
     *
     * Faktura přijatá dle ID
     *
     * @param  string $db_name Název databáze. (required)
     * @param  string $invoice_id ID faktury. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoicesReceivedDbNameInvoiceIdGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\Helios\Invoices\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\Helios\Invoices\Model\ReceivedInvoiceResult|\BeLenka\Helios\Invoices\Model\ErrorResult|\BeLenka\Helios\Invoices\Model\ErrorResult|\BeLenka\Helios\Invoices\Model\ErrorResult|\BeLenka\Helios\Invoices\Model\ErrorResult|\BeLenka\Helios\Invoices\Model\ErrorResult
     */
    public function invoicesReceivedDbNameInvoiceIdGet($db_name, $invoice_id, string $contentType = self::contentTypes['invoicesReceivedDbNameInvoiceIdGet'][0])
    {
        list($response) = $this->invoicesReceivedDbNameInvoiceIdGetWithHttpInfo($db_name, $invoice_id, $contentType);
        return $response;
    }

    /**
     * Operation invoicesReceivedDbNameInvoiceIdGetWithHttpInfo
     *
     * Faktura přijatá dle ID
     *
     * @param  string $db_name Název databáze. (required)
     * @param  string $invoice_id ID faktury. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoicesReceivedDbNameInvoiceIdGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\Helios\Invoices\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\Helios\Invoices\Model\ReceivedInvoiceResult|\BeLenka\Helios\Invoices\Model\ErrorResult|\BeLenka\Helios\Invoices\Model\ErrorResult|\BeLenka\Helios\Invoices\Model\ErrorResult|\BeLenka\Helios\Invoices\Model\ErrorResult|\BeLenka\Helios\Invoices\Model\ErrorResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function invoicesReceivedDbNameInvoiceIdGetWithHttpInfo($db_name, $invoice_id, string $contentType = self::contentTypes['invoicesReceivedDbNameInvoiceIdGet'][0])
    {
        $request = $this->invoicesReceivedDbNameInvoiceIdGetRequest($db_name, $invoice_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\Helios\Invoices\Model\ReceivedInvoiceResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\Helios\Invoices\Model\ReceivedInvoiceResult' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\Helios\Invoices\Model\ReceivedInvoiceResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\BeLenka\Helios\Invoices\Model\ErrorResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\Helios\Invoices\Model\ErrorResult' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\Helios\Invoices\Model\ErrorResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\BeLenka\Helios\Invoices\Model\ErrorResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\Helios\Invoices\Model\ErrorResult' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\Helios\Invoices\Model\ErrorResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\BeLenka\Helios\Invoices\Model\ErrorResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\Helios\Invoices\Model\ErrorResult' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\Helios\Invoices\Model\ErrorResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\BeLenka\Helios\Invoices\Model\ErrorResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\Helios\Invoices\Model\ErrorResult' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\Helios\Invoices\Model\ErrorResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\BeLenka\Helios\Invoices\Model\ErrorResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\Helios\Invoices\Model\ErrorResult' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\Helios\Invoices\Model\ErrorResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\BeLenka\Helios\Invoices\Model\ReceivedInvoiceResult';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\Helios\Invoices\Model\ReceivedInvoiceResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\Helios\Invoices\Model\ErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\Helios\Invoices\Model\ErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\Helios\Invoices\Model\ErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\Helios\Invoices\Model\ErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\Helios\Invoices\Model\ErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation invoicesReceivedDbNameInvoiceIdGetAsync
     *
     * Faktura přijatá dle ID
     *
     * @param  string $db_name Název databáze. (required)
     * @param  string $invoice_id ID faktury. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoicesReceivedDbNameInvoiceIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function invoicesReceivedDbNameInvoiceIdGetAsync($db_name, $invoice_id, string $contentType = self::contentTypes['invoicesReceivedDbNameInvoiceIdGet'][0])
    {
        return $this->invoicesReceivedDbNameInvoiceIdGetAsyncWithHttpInfo($db_name, $invoice_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation invoicesReceivedDbNameInvoiceIdGetAsyncWithHttpInfo
     *
     * Faktura přijatá dle ID
     *
     * @param  string $db_name Název databáze. (required)
     * @param  string $invoice_id ID faktury. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoicesReceivedDbNameInvoiceIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function invoicesReceivedDbNameInvoiceIdGetAsyncWithHttpInfo($db_name, $invoice_id, string $contentType = self::contentTypes['invoicesReceivedDbNameInvoiceIdGet'][0])
    {
        $returnType = '\BeLenka\Helios\Invoices\Model\ReceivedInvoiceResult';
        $request = $this->invoicesReceivedDbNameInvoiceIdGetRequest($db_name, $invoice_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'invoicesReceivedDbNameInvoiceIdGet'
     *
     * @param  string $db_name Název databáze. (required)
     * @param  string $invoice_id ID faktury. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoicesReceivedDbNameInvoiceIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function invoicesReceivedDbNameInvoiceIdGetRequest($db_name, $invoice_id, string $contentType = self::contentTypes['invoicesReceivedDbNameInvoiceIdGet'][0])
    {

        // verify the required parameter 'db_name' is set
        if ($db_name === null || (is_array($db_name) && count($db_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $db_name when calling invoicesReceivedDbNameInvoiceIdGet'
            );
        }

        // verify the required parameter 'invoice_id' is set
        if ($invoice_id === null || (is_array($invoice_id) && count($invoice_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_id when calling invoicesReceivedDbNameInvoiceIdGet'
            );
        }


        $resourcePath = '/invoices/received/{dbName}/{invoiceId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($db_name !== null) {
            $resourcePath = str_replace(
                '{' . 'dbName' . '}',
                ObjectSerializer::toPathValue($db_name),
                $resourcePath
            );
        }
        // path params
        if ($invoice_id !== null) {
            $resourcePath = str_replace(
                '{' . 'invoiceId' . '}',
                ObjectSerializer::toPathValue($invoice_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation invoicesReceivedDbNameInvoiceIdItemsGet
     *
     * Seznam položek faktury přijaté
     *
     * @param  string $db_name Název databáze. (required)
     * @param  string $invoice_id ID faktury. (required)
     * @param  string $filter Podmínka pro výběr dat. (optional)
     * @param  string $orderby Seznam sloupců, podle kterých chci třídit. (optional)
     * @param  int $top Stránkování - počet vrácených záznamů (pokud je jich tolik k dispozici, jinak méně). (optional)
     * @param  int $skip Stránkování - počet přeskočených záznamů. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoicesReceivedDbNameInvoiceIdItemsGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\Helios\Invoices\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\Helios\Invoices\Model\ReceivedInvoiceItemsResult|\BeLenka\Helios\Invoices\Model\ErrorResult|\BeLenka\Helios\Invoices\Model\ErrorResult|\BeLenka\Helios\Invoices\Model\ErrorResult|\BeLenka\Helios\Invoices\Model\ErrorResult|\BeLenka\Helios\Invoices\Model\ErrorResult
     */
    public function invoicesReceivedDbNameInvoiceIdItemsGet($db_name, $invoice_id, $filter = null, $orderby = null, $top = null, $skip = null, string $contentType = self::contentTypes['invoicesReceivedDbNameInvoiceIdItemsGet'][0])
    {
        list($response) = $this->invoicesReceivedDbNameInvoiceIdItemsGetWithHttpInfo($db_name, $invoice_id, $filter, $orderby, $top, $skip, $contentType);
        return $response;
    }

    /**
     * Operation invoicesReceivedDbNameInvoiceIdItemsGetWithHttpInfo
     *
     * Seznam položek faktury přijaté
     *
     * @param  string $db_name Název databáze. (required)
     * @param  string $invoice_id ID faktury. (required)
     * @param  string $filter Podmínka pro výběr dat. (optional)
     * @param  string $orderby Seznam sloupců, podle kterých chci třídit. (optional)
     * @param  int $top Stránkování - počet vrácených záznamů (pokud je jich tolik k dispozici, jinak méně). (optional)
     * @param  int $skip Stránkování - počet přeskočených záznamů. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoicesReceivedDbNameInvoiceIdItemsGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\Helios\Invoices\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\Helios\Invoices\Model\ReceivedInvoiceItemsResult|\BeLenka\Helios\Invoices\Model\ErrorResult|\BeLenka\Helios\Invoices\Model\ErrorResult|\BeLenka\Helios\Invoices\Model\ErrorResult|\BeLenka\Helios\Invoices\Model\ErrorResult|\BeLenka\Helios\Invoices\Model\ErrorResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function invoicesReceivedDbNameInvoiceIdItemsGetWithHttpInfo($db_name, $invoice_id, $filter = null, $orderby = null, $top = null, $skip = null, string $contentType = self::contentTypes['invoicesReceivedDbNameInvoiceIdItemsGet'][0])
    {
        $request = $this->invoicesReceivedDbNameInvoiceIdItemsGetRequest($db_name, $invoice_id, $filter, $orderby, $top, $skip, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\Helios\Invoices\Model\ReceivedInvoiceItemsResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\Helios\Invoices\Model\ReceivedInvoiceItemsResult' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\Helios\Invoices\Model\ReceivedInvoiceItemsResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\BeLenka\Helios\Invoices\Model\ErrorResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\Helios\Invoices\Model\ErrorResult' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\Helios\Invoices\Model\ErrorResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\BeLenka\Helios\Invoices\Model\ErrorResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\Helios\Invoices\Model\ErrorResult' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\Helios\Invoices\Model\ErrorResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\BeLenka\Helios\Invoices\Model\ErrorResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\Helios\Invoices\Model\ErrorResult' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\Helios\Invoices\Model\ErrorResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\BeLenka\Helios\Invoices\Model\ErrorResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\Helios\Invoices\Model\ErrorResult' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\Helios\Invoices\Model\ErrorResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\BeLenka\Helios\Invoices\Model\ErrorResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\Helios\Invoices\Model\ErrorResult' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\Helios\Invoices\Model\ErrorResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\BeLenka\Helios\Invoices\Model\ReceivedInvoiceItemsResult';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\Helios\Invoices\Model\ReceivedInvoiceItemsResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\Helios\Invoices\Model\ErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\Helios\Invoices\Model\ErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\Helios\Invoices\Model\ErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\Helios\Invoices\Model\ErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\Helios\Invoices\Model\ErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation invoicesReceivedDbNameInvoiceIdItemsGetAsync
     *
     * Seznam položek faktury přijaté
     *
     * @param  string $db_name Název databáze. (required)
     * @param  string $invoice_id ID faktury. (required)
     * @param  string $filter Podmínka pro výběr dat. (optional)
     * @param  string $orderby Seznam sloupců, podle kterých chci třídit. (optional)
     * @param  int $top Stránkování - počet vrácených záznamů (pokud je jich tolik k dispozici, jinak méně). (optional)
     * @param  int $skip Stránkování - počet přeskočených záznamů. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoicesReceivedDbNameInvoiceIdItemsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function invoicesReceivedDbNameInvoiceIdItemsGetAsync($db_name, $invoice_id, $filter = null, $orderby = null, $top = null, $skip = null, string $contentType = self::contentTypes['invoicesReceivedDbNameInvoiceIdItemsGet'][0])
    {
        return $this->invoicesReceivedDbNameInvoiceIdItemsGetAsyncWithHttpInfo($db_name, $invoice_id, $filter, $orderby, $top, $skip, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation invoicesReceivedDbNameInvoiceIdItemsGetAsyncWithHttpInfo
     *
     * Seznam položek faktury přijaté
     *
     * @param  string $db_name Název databáze. (required)
     * @param  string $invoice_id ID faktury. (required)
     * @param  string $filter Podmínka pro výběr dat. (optional)
     * @param  string $orderby Seznam sloupců, podle kterých chci třídit. (optional)
     * @param  int $top Stránkování - počet vrácených záznamů (pokud je jich tolik k dispozici, jinak méně). (optional)
     * @param  int $skip Stránkování - počet přeskočených záznamů. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoicesReceivedDbNameInvoiceIdItemsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function invoicesReceivedDbNameInvoiceIdItemsGetAsyncWithHttpInfo($db_name, $invoice_id, $filter = null, $orderby = null, $top = null, $skip = null, string $contentType = self::contentTypes['invoicesReceivedDbNameInvoiceIdItemsGet'][0])
    {
        $returnType = '\BeLenka\Helios\Invoices\Model\ReceivedInvoiceItemsResult';
        $request = $this->invoicesReceivedDbNameInvoiceIdItemsGetRequest($db_name, $invoice_id, $filter, $orderby, $top, $skip, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'invoicesReceivedDbNameInvoiceIdItemsGet'
     *
     * @param  string $db_name Název databáze. (required)
     * @param  string $invoice_id ID faktury. (required)
     * @param  string $filter Podmínka pro výběr dat. (optional)
     * @param  string $orderby Seznam sloupců, podle kterých chci třídit. (optional)
     * @param  int $top Stránkování - počet vrácených záznamů (pokud je jich tolik k dispozici, jinak méně). (optional)
     * @param  int $skip Stránkování - počet přeskočených záznamů. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoicesReceivedDbNameInvoiceIdItemsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function invoicesReceivedDbNameInvoiceIdItemsGetRequest($db_name, $invoice_id, $filter = null, $orderby = null, $top = null, $skip = null, string $contentType = self::contentTypes['invoicesReceivedDbNameInvoiceIdItemsGet'][0])
    {

        // verify the required parameter 'db_name' is set
        if ($db_name === null || (is_array($db_name) && count($db_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $db_name when calling invoicesReceivedDbNameInvoiceIdItemsGet'
            );
        }

        // verify the required parameter 'invoice_id' is set
        if ($invoice_id === null || (is_array($invoice_id) && count($invoice_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_id when calling invoicesReceivedDbNameInvoiceIdItemsGet'
            );
        }






        $resourcePath = '/invoices/received/{dbName}/{invoiceId}/items';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            'filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderby,
            'orderby', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $top,
            'top', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            'skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($db_name !== null) {
            $resourcePath = str_replace(
                '{' . 'dbName' . '}',
                ObjectSerializer::toPathValue($db_name),
                $resourcePath
            );
        }
        // path params
        if ($invoice_id !== null) {
            $resourcePath = str_replace(
                '{' . 'invoiceId' . '}',
                ObjectSerializer::toPathValue($invoice_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation invoicesReceivedDbNamePost
     *
     * Vytvoření nové faktury přijaté
     *
     * @param  string $db_name Název databáze. (required)
     * @param  \BeLenka\Helios\Invoices\Model\ReceivedInvoiceBodyPOST $received_invoice_body_post  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoicesReceivedDbNamePost'] to see the possible values for this operation
     *
     * @throws \BeLenka\Helios\Invoices\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\Helios\Invoices\Model\ErrorResult|\BeLenka\Helios\Invoices\Model\ErrorResult|\BeLenka\Helios\Invoices\Model\ErrorResult|\BeLenka\Helios\Invoices\Model\ErrorResult|\BeLenka\Helios\Invoices\Model\ErrorResult|\BeLenka\Helios\Invoices\Model\ReceivedInvoicePOSTResult
     */
    public function invoicesReceivedDbNamePost($db_name, $received_invoice_body_post = null, string $contentType = self::contentTypes['invoicesReceivedDbNamePost'][0])
    {
        list($response) = $this->invoicesReceivedDbNamePostWithHttpInfo($db_name, $received_invoice_body_post, $contentType);
        return $response;
    }

    /**
     * Operation invoicesReceivedDbNamePostWithHttpInfo
     *
     * Vytvoření nové faktury přijaté
     *
     * @param  string $db_name Název databáze. (required)
     * @param  \BeLenka\Helios\Invoices\Model\ReceivedInvoiceBodyPOST $received_invoice_body_post  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoicesReceivedDbNamePost'] to see the possible values for this operation
     *
     * @throws \BeLenka\Helios\Invoices\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\Helios\Invoices\Model\ErrorResult|\BeLenka\Helios\Invoices\Model\ErrorResult|\BeLenka\Helios\Invoices\Model\ErrorResult|\BeLenka\Helios\Invoices\Model\ErrorResult|\BeLenka\Helios\Invoices\Model\ErrorResult|\BeLenka\Helios\Invoices\Model\ReceivedInvoicePOSTResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function invoicesReceivedDbNamePostWithHttpInfo($db_name, $received_invoice_body_post = null, string $contentType = self::contentTypes['invoicesReceivedDbNamePost'][0])
    {
        $request = $this->invoicesReceivedDbNamePostRequest($db_name, $received_invoice_body_post, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 401:
                    if ('\BeLenka\Helios\Invoices\Model\ErrorResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\Helios\Invoices\Model\ErrorResult' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\Helios\Invoices\Model\ErrorResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\BeLenka\Helios\Invoices\Model\ErrorResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\Helios\Invoices\Model\ErrorResult' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\Helios\Invoices\Model\ErrorResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\BeLenka\Helios\Invoices\Model\ErrorResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\Helios\Invoices\Model\ErrorResult' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\Helios\Invoices\Model\ErrorResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\BeLenka\Helios\Invoices\Model\ErrorResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\Helios\Invoices\Model\ErrorResult' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\Helios\Invoices\Model\ErrorResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\BeLenka\Helios\Invoices\Model\ErrorResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\Helios\Invoices\Model\ErrorResult' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\Helios\Invoices\Model\ErrorResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 201:
                    if ('\BeLenka\Helios\Invoices\Model\ReceivedInvoicePOSTResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\Helios\Invoices\Model\ReceivedInvoicePOSTResult' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\Helios\Invoices\Model\ReceivedInvoicePOSTResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\BeLenka\Helios\Invoices\Model\ReceivedInvoicePOSTResult';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\Helios\Invoices\Model\ErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\Helios\Invoices\Model\ErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\Helios\Invoices\Model\ErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\Helios\Invoices\Model\ErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\Helios\Invoices\Model\ErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\Helios\Invoices\Model\ReceivedInvoicePOSTResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation invoicesReceivedDbNamePostAsync
     *
     * Vytvoření nové faktury přijaté
     *
     * @param  string $db_name Název databáze. (required)
     * @param  \BeLenka\Helios\Invoices\Model\ReceivedInvoiceBodyPOST $received_invoice_body_post  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoicesReceivedDbNamePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function invoicesReceivedDbNamePostAsync($db_name, $received_invoice_body_post = null, string $contentType = self::contentTypes['invoicesReceivedDbNamePost'][0])
    {
        return $this->invoicesReceivedDbNamePostAsyncWithHttpInfo($db_name, $received_invoice_body_post, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation invoicesReceivedDbNamePostAsyncWithHttpInfo
     *
     * Vytvoření nové faktury přijaté
     *
     * @param  string $db_name Název databáze. (required)
     * @param  \BeLenka\Helios\Invoices\Model\ReceivedInvoiceBodyPOST $received_invoice_body_post  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoicesReceivedDbNamePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function invoicesReceivedDbNamePostAsyncWithHttpInfo($db_name, $received_invoice_body_post = null, string $contentType = self::contentTypes['invoicesReceivedDbNamePost'][0])
    {
        $returnType = '\BeLenka\Helios\Invoices\Model\ReceivedInvoicePOSTResult';
        $request = $this->invoicesReceivedDbNamePostRequest($db_name, $received_invoice_body_post, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'invoicesReceivedDbNamePost'
     *
     * @param  string $db_name Název databáze. (required)
     * @param  \BeLenka\Helios\Invoices\Model\ReceivedInvoiceBodyPOST $received_invoice_body_post  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoicesReceivedDbNamePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function invoicesReceivedDbNamePostRequest($db_name, $received_invoice_body_post = null, string $contentType = self::contentTypes['invoicesReceivedDbNamePost'][0])
    {

        // verify the required parameter 'db_name' is set
        if ($db_name === null || (is_array($db_name) && count($db_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $db_name when calling invoicesReceivedDbNamePost'
            );
        }



        $resourcePath = '/invoices/received/{dbName}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($db_name !== null) {
            $resourcePath = str_replace(
                '{' . 'dbName' . '}',
                ObjectSerializer::toPathValue($db_name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($received_invoice_body_post)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($received_invoice_body_post));
            } else {
                $httpBody = $received_invoice_body_post;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
